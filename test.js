// Generated by CoffeeScript 1.8.0
(function() {
  var cheerio, content, fs, listOptions, listQueryString, listUrl, loginOptions, loginPostData, loginQueryString, loginUrl, parseBody, request;

  request = require('request');

  cheerio = require('cheerio');

  fs = require('fs');

  request = request.defaults({
    jar: true,
    strictSSL: false,
    gzip: true,
    followAllRedirects: true,
    headers: {
      "User-Agent": "Nodejs"
    }
  });

  loginUrl = 'https://myportal.sutd.edu.sg/psp/EPPRD/';

  loginQueryString = {
    cmd: "login",
    languageCd: "ENG"
  };

  loginPostData = {
    timezoneOffset: "-480",
    userid: "1001340",
    pwd: "Sutd15041993"
  };

  loginOptions = {
    url: loginUrl,
    method: "POST",
    qs: loginQueryString,
    form: loginPostData
  };

  listUrl = 'https://sams.sutd.edu.sg/psc/CSPRD/EMPLOYEE/HRMS/c/SA_LEARNER_SERVICES.SSR_SSENRL_LIST.GBL';

  listQueryString = {
    Page: "SSR_SSENRL_LIST",
    Action: "A",
    EMPLID: "1001340",
    TargetFrameName: "None"
  };

  listOptions = {
    url: listUrl,
    qs: listQueryString
  };

  'request loginOptions, (loginError, loginResponse, loginBody) ->\n	if loginError\n		console.log(loginError)\n	else\n		#console.log(loginResponse.statusCode, loginBody)\n		#console.log(loginResponse)\n		request listOptions, (listError, listResponse, listBody) ->\n			if listError\n				console.log(listError)\n			else\n				console.log(listBody)\n				#parseBody(listBody)\n';

  parseBody = function(body) {
    var $, courses;
    $ = cheerio.load(body);
    courses = [];
    $('table.PSGROUPBOXWBO').each(function(index, value) {
      var course, i, lesson, nodes, _i, _ref;
      if (index !== 0) {
        course = {
          "name": $(this).find('td.PAGROUPDIVIDER').text()
        };
        nodes = [];
        $(this).find('span.PSEDITBOX_DISPONLY, span.PSLONGEDITBOX').each(function(index, value) {
          var node;
          node = $(this).text();
          if (node.length > 1) {
            return nodes.push(node);
          }
        });
        course['status'] = nodes.shift();
        course['units'] = nodes.shift();
        course['grading'] = nodes.shift();
        course['classNumber'] = nodes.shift();
        course['component'] = nodes.shift();
        course['lessons'] = [];
        for (i = _i = 0, _ref = nodes.length; _i < _ref; i = _i += 4) {
          lesson = {
            time: nodes[i],
            room: nodes[i + 1],
            instructor: nodes[i + 2],
            date: nodes[i + 3]
          };
          course['lessons'].push(lesson);
        }
        return courses.push(course);
      }
    });
    return console.log(courses);
  };

  content = fs.readFileSync('result.html');

  parseBody(content);

}).call(this);
